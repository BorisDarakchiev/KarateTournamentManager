@model KarateTournamentManager.Models.ViewModels.MatchViewModel


<h1>Управление на мача</h1>
<div class="card">
    <div class="card-header">
        <strong>@Model.Participant1Name срещу @Model.Participant2Name</strong>
    </div>
    <div class="card-body">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Участник</th>
                    <th>Точки</th>
                    <th></th>
                    <th>Екшън</th>
                </tr>
            </thead>
            <tbody>

                <tr>
                    <td>@Model.Participant1Name</td>
                    <td><span id="participant1Score">@Model.Participant1Score</span></td>
                    <td>
                        <button type="button" class="btn btn-success btn-sm" onclick="updateScore('@Model.Id', 'Participant1', 1)">+1</button>
                        <button type="button" class="btn btn-success btn-sm" onclick="updateScore('@Model.Id', 'Participant1', 2)">+2</button>
                        <button type="button" class="btn btn-success btn-sm" onclick="updateScore('@Model.Id', 'Participant1', 3)">+3</button>
                        <button type="button" class="btn btn-danger btn-sm" id="participant1Minus1" @(Model.Participant1Score < 1 ? "disabled" : "") onclick="updateScore('@Model.Id', 'Participant1', -1)">-1</button>
                        <button type="button" class="btn btn-danger btn-sm" id="participant1Minus2" @(Model.Participant1Score < 2 ? "disabled" : "") onclick="updateScore('@Model.Id', 'Participant1', -2)">-2</button>
                        <button type="button" class="btn btn-danger btn-sm" id="participant1Minus3" @(Model.Participant1Score < 3 ? "disabled" : "") onclick="updateScore('@Model.Id', 'Participant1', -3)">-3</button>
                    </td>
                    <td><button type="button" class="btn btn-warning btn-sm" onclick="setWinner('@Model.Id', '@Model.Participant1Id')">Победител</button></td>
                </tr>
                <tr>
                    <td>@Model.Participant2Name</td>
                    <td><span id="participant2Score">@Model.Participant2Score</span></td>
                    <td>
                        <button type="button" class="btn btn-success btn-sm" onclick="updateScore('@Model.Id', 'Participant2', 1)">+1</button>
                        <button type="button" class="btn btn-success btn-sm" onclick="updateScore('@Model.Id', 'Participant2', 2)">+2</button>
                        <button type="button" class="btn btn-success btn-sm" onclick="updateScore('@Model.Id', 'Participant2', 3)">+3</button>
                        <button type="button" class="btn btn-danger btn-sm" id="participant2Minus1" @(Model.Participant2Score < 1 ? "disabled" : "") onclick="updateScore('@Model.Id', 'Participant2', -1)">-1</button>
                        <button type="button" class="btn btn-danger btn-sm" id="participant2Minus2" @(Model.Participant2Score < 2 ? "disabled" : "") onclick="updateScore('@Model.Id', 'Participant2', -2)">-2</button>
                        <button type="button" class="btn btn-danger btn-sm" id="participant2Minus3" @(Model.Participant2Score < 3 ? "disabled" : "") onclick="updateScore('@Model.Id', 'Participant2', -3)">-3</button>
                    </td>
                    <td><button type="button" class="btn btn-warning btn-sm" onclick="setWinner('@Model.Id', '@Model.Participant2Id')">Победител</button></td>
                </tr>
            </tbody>
        </table>
        <div>
            <h3>Управление на таймера</h3>

            <p>Оставащо време: <span id="timerDisplay">@Model.Timer?.CountdownTime.ToString("mm\\:ss")</span></p>
            <button type="button" class="btn btn-primary btn-sm" id="startTimerButton" onclick="startTimer('@Model.Id')">Старт</button>
            <button type="button" class="btn btn-primary btn-sm" id="stopTimerButton" onclick="stopTimer('@Model.Id')">Стоп</button>
        </div>
    </div>
</div>



<script>
    const urls = {
        updateScore: '@Url.Action("UpdateScore", "TimerManager")',
        startTimer: '@Url.Action("StartTimer", "TimerManager")',
        stopTimer: '@Url.Action("StopTimer", "TimerManager")',
        setDuration: '@Url.Action("SetDuration", "TimerManager")',
        addExtraPeriod: '@Url.Action("AddExtraPeriod", "TimerManager")',
        setWinner: '@Url.Action("SetWinner", "TimerManager")'
    };

    async function sendAjaxRequest(url, data, action) {
        console.log(matchId, participantId);
        try {
            const response = await fetch(url, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(data)
            });

            if (!response.ok) {
                throw new Error("Server Error");
            }

            const result = await response.json();
            updateUI(result.participant1Score, result.participant2Score, result.action);

        } catch (error) {
            alert('Грешка: ' + error.message);
        }
    }

    function setWinner(matchId, participantId) {
    fetch('/TimerManager/setwinner', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ matchId, winnerId: participantId })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert(data.message);
        } else {
            alert(`Error: ${data.message}`);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Възникна грешка на сървъра.');
    });
}

    function updateScore(matchId, participant, points) {
        sendAjaxRequest(urls.updateScore, { matchId, participant, points });
    }

    let countdownInterval;
    let countdownTime = @Model.Timer?.CountdownTime.TotalSeconds ?? 0;
    function startTimer(matchId) {
        sendAjaxRequest(urls.startTimer, { matchId });

        countdownInterval = setInterval(() => {
            if (countdownTime > 0) {
                countdownTime--;
                updateTimeDisplay(countdownTime);
            } else {
                clearInterval(countdownInterval);
            }
        }, 1000);
    }

    function stopTimer(matchId) {
        sendAjaxRequest(urls.stopTimer, { matchId });

        clearInterval(countdownInterval);
        updateTimeDisplay(countdownTime);
    }

    function updateTimeDisplay(timeInSeconds) {
        const minutes = Math.floor(timeInSeconds / 60);
        const seconds = (timeInSeconds % 60).toFixed(0);
        document.getElementById("timerDisplay").innerText = `${padZero(minutes)}:${padZero(seconds)}`;
    }

    function padZero(num) {
        return num < 10 ? `0${num}` : num;
    }

    function updateUI(participant1Score, participant2Score, action) {
        if (action === "updateScore") {

            document.querySelector("#participant1Score").innerText = participant1Score;
            document.querySelector("#participant2Score").innerText = participant2Score;

            updateButtonState("#participant1Minus1", participant1Score >= 1);
            updateButtonState("#participant1Minus2", participant1Score >= 2);
            updateButtonState("#participant1Minus3", participant1Score >= 3);

            updateButtonState("#participant2Minus1", participant2Score >= 1);
            updateButtonState("#participant2Minus2", participant2Score >= 2);
            updateButtonState("#participant2Minus3", participant2Score >= 3);

        } else if (action === "startTimer") {

            updateButtonState("#startTimerButton", false);
            updateButtonState("#stopTimerButton", true);
        } else if (action === "stopTimer") {

            updateButtonState("#startTimerButton", true);
            updateButtonState("#stopTimerButton", false);
        }
        function updateButtonState(buttonSelector, isEnabled) {
            const button = document.querySelector(buttonSelector);
            if (button) {
                button.disabled = !isEnabled;
            }
        }
    }

</script>


